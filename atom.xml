<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jser丶Biaozi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yyandxx.win/"/>
  <updated>2018-05-30T04:14:29.810Z</updated>
  <id>https://www.yyandxx.win/</id>
  
  <author>
    <name>YGB</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS知识点随记</title>
    <link href="https://www.yyandxx.win/2018/05/30/JS%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9A%8F%E8%AE%B0/"/>
    <id>https://www.yyandxx.win/2018/05/30/JS知识点随记/</id>
    <published>2018-05-30T04:13:43.000Z</published>
    <updated>2018-05-30T04:14:29.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS知识随记"><a href="#JS知识随记" class="headerlink" title="JS知识随记"></a>JS知识随记</h1><pre><code>使用 window.alert() 弹出警告框。使用 document.write() 方法将内容写到 HTML 文档中。使用 innerHTML 写入到 HTML 元素。使用 console.log() 写入到浏览器的控制台。</code></pre><h4 id="以下是-JavaScript-中最重要的保留字（按字母顺序）："><a href="#以下是-JavaScript-中最重要的保留字（按字母顺序）：" class="headerlink" title="以下是 JavaScript 中最重要的保留字（按字母顺序）："></a>以下是 JavaScript 中最重要的保留字（按字母顺序）：</h4><pre><code>abstract    else        instanceof    superboolean     enum        int            switchbreak        export        interface    synchronizedbyte        extends        let            thiscase        false        long        throwcatch        final        native        throwschar        finally        new            transientclass        float        null        trueconst        for            package        trycontinue    function    private        typeofdebugger    goto        protected    vardefault        if            public        voiddelete        implements    return        volatiledo            import        short        whiledouble        in            static        with</code></pre><h4 id="JavaScript-语句标识符"><a href="#JavaScript-语句标识符" class="headerlink" title="JavaScript 语句标识符"></a>JavaScript 语句标识符</h4><pre><code>语句            描述break            用于跳出循环。catch            语句块，在 try 语句块执行出错时执行 catch 语句块。continue        跳过循环中的一个迭代。do ... while            执行一个语句块，在条件语句为 true 时继续执行该语句块。for                在条件语句为 true 时，可以将代码块执行指定的次数。for ... in        用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。function        定义一个函数if ... else        用于基于不同的条件来执行不同的动作。return            退出函数switch            用于基于不同的条件来执行不同的动作。throw            抛出（生成）错误 。try                实现错误处理，与 catch 一同使用。var                声明一个变量。while            当条件语句为 true 时，执行语句块。</code></pre><h4 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h4><pre><code>可以在文本字符串中使用反斜杠对代码行进行换行document.write(&quot;你好 \世界!&quot;)</code></pre><h4 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h4><pre><code>1、变量必须以字母开头2、变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）3、变量名称对大小写敏感（y 和 Y 是不同的变量）一条语句，多个变量可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;声明也可横跨多行：var lastname=&quot;Doe&quot;,age=30,job=&quot;carpenter&quot;;重新声明 JavaScript 变量如果重新声明 JavaScript 变量，该变量的值不会丢失：在以下两条语句执行后，变量 carname 的值依然是 &quot;Volvo&quot;：var carname=&quot;Volvo&quot;; var carname;var person={    firstname : &quot;John&quot;,    lastname  : &quot;Doe&quot;,    id        :  5566};name=person.lastname;name=person[&quot;lastname&quot;];Undefined 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。不加括号输出函数表达式：function () { return this.firstName + &quot; &quot; + this.lastName; }  作为一个属性被访问加括号输出函数执行结果：John Doe  作为一个函数被执行如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。全局变量有 全局作用域: 网页中所有脚本和函数均可使用。 JavaScript 变量生命周期在它声明时初始化。局部变量在函数执行完毕后销毁。全局变量在页面关闭后销毁。可以在字符串添加转义字符来使用引号：var x = &apos;It\&apos;s alright&apos;;var y = &quot;He is called \&quot;Johnny\&quot;&quot;;在 JavaScript 中，字符串写在单引号或双引号来中。因为这样，以下实例 JavaScript 无法解析：x &quot;We are the so-called &quot;Vikings&quot; from the north.&quot;字符串 &quot;We are the so-called &quot; 被截断。如何解决以上的问题呢？可以使用反斜杠 (\) 来转义 &quot;Vikings&quot; 字符串中的双引号，如下: &quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><pre><code>\&apos;    单引号\&quot;    双引号\\    反斜杠\n    换行\r    回车\t    tab(制表符)\b    退格符\f    换页符通常， JavaScript 字符串是原始值，可以使用字符创建： var firstName = &quot;John&quot;但我们也可以使用 new 关键字将字符串定义为一个对象： var firstName = new String(&quot;John&quot;)不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用方法                描述charAt()            返回指定索引位置的字符charCodeAt()        返回指定索引位置字符的 Unicode 值concat()            连接两个或多个字符串，返回连接后的字符串fromCharCode()        将 Unicode 转换为字符串indexOf()            返回字符串中检索指定字符第一次出现的位置lastIndexOf()        返回字符串中检索指定字符最后一次出现的位置localeCompare()        用本地特定的顺序来比较两个字符串match()                找到一个或多个正则表达式的匹配replace()            替换与正则表达式匹配的子串search()            检索与正则表达式相匹配的值slice()                提取字符串的片断，并在新的字符串中返回被提取的部分split()                把字符串分割为子字符串数组substr()            从起始索引号提取字符串中指定数目的字符substring()            提取字符串中两个指定的索引号之间的字符toLocaleLowerCase()    根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射toLocaleUpperCase()    根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射toLowerCase()        把字符串转换为小写toString()            返回字符串对象值toUpperCase()        把字符串转换为大写trim()                移除字符串首尾空白valueOf()            返回某个字符串对象的原始值</code></pre><h4 id="循环："><a href="#循环：" class="headerlink" title="循环："></a>循环：</h4><pre><code>for - 循环代码块一定的次数for/in - 循环遍历对象的属性while - 当指定的条件为 true 时循环指定的代码块do/while - 同样当指定的条件为 true 时循环指定的代码块for in语句循环遍历对象的属性：var person={fname:&quot;John&quot;,lname:&quot;Doe&quot;,age:25}; for (x in person){    txt=txt + person[x];}</code></pre><h4 id="在-JavaScript-中有-5-种不同的数据类型："><a href="#在-JavaScript-中有-5-种不同的数据类型：" class="headerlink" title="在 JavaScript 中有 5 种不同的数据类型："></a>在 JavaScript 中有 5 种不同的数据类型：</h4><pre><code>stringnumberbooleanobjectfunction3 种对象类型：ObjectDateArray2 个不包含任何值的数据类型：nullundefined实例typeof &quot;John&quot;                 // 返回 string typeof 3.14                   // 返回 numbertypeof NaN                    // 返回 numbertypeof false                  // 返回 booleantypeof [1,2,3,4]              // 返回 objecttypeof {name:&apos;John&apos;, age:34}  // 返回 objecttypeof new Date()             // 返回 objecttypeof function () {}         // 返回 functiontypeof myCar                  // 返回 undefined (如果 myCar 没有声明)typeof null                   // 返回 objectconstructor 属性返回所有 JavaScript 变量的构造函数。&quot;John&quot;.constructor                 // 返回函数 String()  { [native code] }(3.14).constructor                 // 返回函数 Number()  { [native code] }false.constructor                  // 返回函数 Boolean() { [native code] }[1,2,3,4].constructor              // 返回函数 Array()   { [native code] }{name:&apos;John&apos;, age:34}.constructor  // 返回函数 Object()  { [native code] }new Date().constructor             // 返回函数 Date()    { [native code] }function () {}.constructor         // 返回函数 Function(){ [native code] }number转stringtoExponential()    把对象的值转换为指数计数法。toFixed()    把数字转换为字符串，结果的小数点后有指定位数的数字。toPrecision()    把数字格式化为指定的长度。date转stringgetDate()    从 Date 对象返回一个月中的某一天 (1 ~ 31)。getDay()    从 Date 对象返回一周中的某一天 (0 ~ 6)。getFullYear()    从 Date 对象以四位数字返回年份。getHours()    返回 Date 对象的小时 (0 ~ 23)。getMilliseconds()    返回 Date 对象的毫秒(0 ~ 999)。getMinutes()    返回 Date 对象的分钟 (0 ~ 59)。getMonth()    从 Date 对象返回月份 (0 ~ 11)。getSeconds()    返回 Date 对象的秒数 (0 ~ 59)。getTime()    返回 1970 年 1 月 1 日至今的毫秒数。string转number全局方法 Number() 可以将字符串转换为数字。字符串包含数字(如 &quot;3.14&quot;) 转换为数字 (如 3.14).空字符串转换为 0。其他的字符串会转换为 NaN (不是个数字)。parseFloat()    解析一个字符串，并返回一个浮点数。parseInt()    解析一个字符串，并返回一个整数。</code></pre><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符 +"></a>一元运算符 +</h4><pre><code>Operator + 可用于将变量转换为数字：var y = &quot;5&quot;;      // y 是一个字符串var x = + y;      // x 是一个数字var y = &quot;John&quot;;   // y 是一个字符串var x = + y;      // x 是一个数字 (NaN)自动转换类型当 JavaScript 尝试操作一个 &quot;错误&quot; 的数据类型时，会自动转换为 &quot;正确&quot; 的数据类型。5 + null    // 返回 5         null 转换为 0&quot;5&quot; + null  // 返回&quot;5null&quot;   null 转换为 &quot;null&quot;&quot;5&quot; + 1     // 返回 &quot;51&quot;      1 转换为 &quot;1&quot;  &quot;5&quot; - 1     // 返回 4         &quot;5&quot; 转换为 5自动转换为字符串当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：document.getElementById(&quot;demo&quot;).innerHTML = myVar;// if myVar = {name:&quot;Fjohn&quot;}  // toString 转换为 &quot;[object Object]&quot;// if myVar = [1,2,3,4]       // toString 转换为 &quot;1,2,3,4&quot;// if myVar = new Date()      // toString 转换为 &quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;数字和布尔值也经常相互转换：// if myVar = 123             // toString 转换为 &quot;123&quot;// if myVar = true            // toString 转换为 &quot;true&quot;// if myVar = false           // toString 转换为 &quot;false&quot;</code></pre><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><pre><code>i    执行对大小写不敏感的匹配。g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。m    执行多行匹配。正则表达式模式修饰符    修饰符用于执行区分大小写和全局匹配:    修饰符    描述    i    执行对大小写不敏感的匹配。    g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。    m    执行多行匹配。方括号    方括号用于查找某个范围内的字符：    表达式    描述    [abc]    查找方括号之间的任何字符。    [^abc]    查找任何不在方括号之间的字符。    [0-9]    查找任何从 0 至 9 的数字。    [a-z]    查找任何从小写 a 到小写 z 的字符。    [A-Z]    查找任何从大写 A 到大写 Z 的字符。    [A-z]    查找任何从大写 A 到小写 z 的字符。    [adgk]    查找给定集合内的任何字符。    [^adgk]    查找给定集合外的任何字符。    (red|blue|green)    查找任何指定的选项。元字符    元字符（Metacharacter）是拥有特殊含义的字符：    元字符    描述    .    查找单个字符，除了换行和行结束符。    \w    查找单词字符。    \W    查找非单词字符。    \d    查找数字。    \D    查找非数字字符。    \s    查找空白字符。    \S    查找非空白字符。    \b    匹配单词边界。    \B    匹配非单词边界。    \0    查找 NULL 字符。    \n    查找换行符。    \f    查找换页符。    \r    查找回车符。    \t    查找制表符。    \v    查找垂直制表符。    \xxx    查找以八进制数 xxx 规定的字符。    \xdd    查找以十六进制数 dd 规定的字符。    \uxxxx    查找以十六进制数 xxxx 规定的 Unicode 字符。量词    量词    描述    n+        匹配任何包含至少一个 n 的字符串。    例如，/a+/ 匹配 &quot;candy&quot; 中的 &quot;a&quot;，&quot;caaaaaaandy&quot; 中所有的 &quot;a&quot;。    n*        匹配任何包含零个或多个 n 的字符串。    例如，/bo*/ 匹配 &quot;A ghost booooed&quot; 中的 &quot;boooo&quot;，&quot;A bird warbled&quot; 中的 &quot;b&quot;，但是不匹配 &quot;A goat grunted&quot;。    n?        匹配任何包含零个或一个 n 的字符串。    例如，/e?le?/ 匹配 &quot;angel&quot; 中的 &quot;el&quot;，&quot;angle&quot; 中的 &quot;le&quot;。    n{X}        匹配包含 X 个 n 的序列的字符串。    例如，/a{2}/ 不匹配 &quot;candy,&quot; 中的 &quot;a&quot;，但是匹配 &quot;caandy,&quot; 中的两个 &quot;a&quot;，且匹配 &quot;caaandy.&quot; 中的前两个 &quot;a&quot;。    n{X,}        X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。    例如，/a{2,}/ 不匹配 &quot;candy&quot; 中的 &quot;a&quot;，但是匹配 &quot;caandy&quot; 和 &quot;caaaaaaandy.&quot; 中所有的 &quot;a&quot;。    n{X,Y}        X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。    例如，/a{1,3}/ 不匹配 &quot;cndy&quot;，匹配 &quot;candy,&quot; 中的 &quot;a&quot;，&quot;caandy,&quot; 中的两个 &quot;a&quot;，匹配 &quot;caaaaaaandy&quot; 中的前面三个 &quot;a&quot;。注意，当匹配 &quot;caaaaaaandy&quot; 时，即使原始字符串拥有更多的 &quot;a&quot;，匹配项也是 &quot;aaa&quot;。    n{X,}    匹配包含至少 X 个 n 的序列的字符串。    n$    匹配任何结尾为 n 的字符串。    ^n    匹配任何开头为 n 的字符串。    ?=n    匹配任何其后紧接指定字符串 n 的字符串。    ?!n    匹配任何其后没有紧接指定字符串 n 的字符串。search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。search 方法可使用字符串作为参数。字符串参数会转换为正则表达式replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。实例使用正则表达式搜索 &quot;Runoob&quot; 字符串，且不区分大小写var str = &quot;Visit Runoob!&quot;; var n = str.search(/Runoob/i);输出结果为：6使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 Runoob :var str = document.getElementById(&quot;demo&quot;).innerHTML;   //Visit Microsoft!var txt = str.replace(/microsoft/i,&quot;Runoob&quot;);结果输出为:Visit Runoob!var patt = /e/;patt.test(&quot;The best things in life are free!&quot;); //   /e/.test(&quot;The best things in life are free!&quot;)字符串中含有 &quot;e&quot;，所以该实例输出为：true/e/.exec(&quot;The best things in life are free!&quot;);字符串中含有 &quot;e&quot;，所以该实例输出为:e</code></pre><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h4><pre><code>var txt=&quot;&quot;; function message() {     try {         adddlert(&quot;Welcome guest!&quot;);     } catch(err) {                                         //页面输出结果：        txt=&quot;本页有一个错误。\n\n&quot;;                     //本页有一个错误。        txt+=&quot;错误描述：&quot; + err.message + &quot;\n\n&quot;;        //adddlert is not defined        txt+=&quot;点击确定继续。\n\n&quot;;                         //点击确定继续。        alert(txt);     } }throw抛出错误function myFunction(){  try  {     var x=document.getElementById(&quot;demo&quot;).value;    if(x==&quot;&quot;)    throw &quot;值为空&quot;;    if(isNaN(x)) throw &quot;不是数字&quot;;    if(x &gt; 10) throw &quot;太大&quot;;    if(x &lt; 5) throw &quot;太小&quot;;  }  catch(err)  {    var y=document.getElementById(&quot;mess&quot;);    y.innerHTML=&quot;错误：&quot; + err + &quot;。&quot;;  }}</code></pre><h4 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h4><pre><code>变量提升：函数声明和变量声明总是会被解释器悄悄地被&quot;提升&quot;到方法体的最顶部。    值留在原地switch 语句会使用恒等计算符(===)进行比较JavaScript 中的所有数据都是以 64 位浮点型数据(float) 来存储。所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定：var x = 0.1;var y = 0.2;var z = x + y;z的值为0.30000000000000004if(z==0.3) falsedocument.getElementById(&quot;demo&quot;).innerHTML = z;要解决以上问题，可以用整数的乘除法来解决：var z = (x * 10 + y * 10) / 10; 字符串断行需要使用反斜杠(\)，如下所示:var x = &quot;Hello \World!&quot;;如果是一个不完整的语句，如下所示:varJavaScript 将尝试读取第二行的语句：power = 10;但是由于这样的语句是完整的:returnJavaScript 将自动关闭语句:return;在 JavaScript 中，分号是可选的 。由于 return 是一个完整的语句，所以 JavaScript 将关闭 return 语句。如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。错误的使用方式：if (myObj !== null &amp;&amp; typeof myObj !== &quot;undefined&quot;) 正确的方式是我们需要先使用 typeof 来检测对象是否已定义：if (typeof myObj !== &quot;undefined&quot; &amp;&amp; myObj !== null) 以下代码的的变量 i 返回 10，而不是 undefined： i为当前作用域下全局的实例for (var i = 0; i &lt; 10; i++) {    // some code}return i;&lt;form name=&quot;myForm&quot; action=&quot;demo_form.php&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&gt;    名字: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;&lt;/form&gt;function validateForm() {    var x = document.forms[&quot;myForm&quot;][&quot;fname&quot;].value; // [&quot;myform&quot;]返回的是上面的代码 frame返回的是 input框    if (x == null || x == &quot;&quot;) {        alert(&quot;需要输入名字。&quot;);        return false;    }}表单验证输入是否是数字的时候现验证是否是数字然后在添加范围if (isNaN(x) || x &lt; 1 || x &gt; 10) {    text = &quot;输入错误&quot;;} else {    text = &quot;输入正确&quot;;}HTML 表单验证也可以通过浏览器来自动完成。如果表单字段 (fname) 的值为空, required 属性会阻止表单提交：onsubmit=&quot;return validateForm()&quot;  //在事件中return表示，当validateForm()这个函数返回值是true的时候，表单提交，反之则不提交。</code></pre><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><pre><code>JSON 语法规则    数据为 键/值 对。    数据由逗号分隔。    大括号保存对象    方括号保存数组JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象函数                描述JSON.parse()        用于将一个 JSON 字符串转换为 JavaScript 对象。JSON.stringify()    用于将 JavaScript 值转换为 JSON 字符串。javascript:void(0) 含义我们经常会使用到 javascript:void(0) 这样的代码，那么在 JavaScript 中 javascript:void(0) 代表的是什么意思呢？javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。&lt;head&gt;&lt;script type=&quot;text/javascript&quot;&gt;&lt;!--function getValue(){  var a,b,c;  a = void ( b = 5, c = 7 );  document.write(&apos;a = &apos; + a + &apos; b = &apos; + b +&apos; c = &apos; + c ); // a 为undefined b=5 c=7} //--&gt;&lt;/script&gt;&lt;/head&gt;# 包含了一个位置信息，默认的锚是#top 也就是网页的上端。而javascript:void(0), 仅仅表示一个死链接。在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。如果你要定义一个死链接请使用 javascript:void(0) 。</code></pre><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><pre><code>变量名变量名推荐使用驼峰法来命名(camelCase):firstName = &quot;John&quot;;lastName = &quot;Doe&quot;;price = 19.90;tax = 0.20;fullPrice = price + (price * tax);空格与运算符通常运算符 ( = + - * / ) 前后需要添加空格:实例:var x = y + z;var values = [&quot;Volvo&quot;, &quot;Saab&quot;, &quot;Fiat&quot;];代码缩进通常使用 4 个空格符号来缩进代码块语句规则简单语句的通用规则:一条语句通常以符号作为结束符。实例：var values = [&quot;Volvo&quot;, &quot;Saab&quot;, &quot;Fiat&quot;];var person = {    firstName: &quot;John&quot;,    lastName: &quot;Doe&quot;,    age: 50,    eyeColor: &quot;blue&quot;};复杂语句的通用规则:将左花括号放在第一行的结尾。左花括号前添加一空格。将右花括号独立放在一行。不要以分号结束一个复杂的声明。函数:function toCelsius(fahrenheit) {    return (5 / 9) * (fahrenheit - 32);}循环:for (i = 0; i &lt; 5; i++) {    x += i;}条件语句:if (time &lt; 20) {    greeting = &quot;Good day&quot;;} else {    greeting = &quot;Good evening&quot;;}对象规则对象定义的规则:将左花括号与类名放在同一行。冒号与属性值间有个空格。字符串使用双引号，数字不需要。最后一个属性-值对后面不要添加逗号。将右花括号独立放在一行，并以符号作为结束符号。实例:var person = {    firstName: &quot;John&quot;,    lastName: &quot;Doe&quot;,    age: 50,    eyeColor: &quot;blue&quot;};使用小写文件名大多 Web 服务器 (Apache, Unix) 对大小写敏感： london.jpg 不能通过 London.jpg 访问。其他 Web 服务器 (Microsoft, IIS) 对大小写不敏感： london.jpg 可以通过 London.jpg 或 london.jpg 访问。你必须保持统一的风格，我们建议统一使用小写的文件名。</code></pre><h1 id="JS函数"><a href="#JS函数" class="headerlink" title="JS函数"></a>JS函数</h1><h5 id="JavaScript-函数定义"><a href="#JavaScript-函数定义" class="headerlink" title="JavaScript 函数定义"></a>JavaScript 函数定义</h5><pre><code>分号是用来分隔可执行JavaScript语句。 由于函数声明不是一个可执行语句，所以不以分号结束。函数表达式JavaScript 函数可以通过一个表达式定义。函数表达式可以存储在变量中：实例var x = function (a, b) {return a * b};在函数表达式存储在变量后，变量也可作为一个函数使用：实例var x = function (a, b) {return a * b};var z = x(4, 3);以上函数实际上是一个 匿名函数 (函数没有名称)。函数存储在变量中，不需要函数名称，通常通过变量名来调用。Function() 构造函数在以上实例中，我们了解到函数通过关键字 function 定义。函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。实例var myFunction = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a * b&quot;);var x = myFunction(4, 3);实际上，你不必使用构造函数。上面实例可以写成：实例var myFunction = function (a, b) {return a * b}var x = myFunction(4, 3);在 JavaScript 中，很多时候，你需要避免使用 new 关键字。函数提升（Hoisting）提升（Hoisting）是 JavaScript 默认将当前作用域提升到前面去的的行为。提升（Hoisting）应用在变量的声明与函数的声明。因此，函数可以在声明之前调用：myFunction(5);function myFunction(y) {    return y * y;}使用表达式定义函数时无法提升。用构造函数声明的函数可以报错写法：x(4, 3);var x = function (a, b) {return a * b};分析：声明提前，值留在原地，报错原因为x is not a function自调用函数函数表达式可以 &quot;自调用&quot;。自调用表达式会自动调用。如果表达式后面紧跟 () ，则会自动调用。不能自调用声明的函数。通过添加括号，来说明它是一个函数表达式：实例(function () {    var x = &quot;Hello!!&quot;;      // 我将调用自己})();以上函数实际上是一个 匿名自我调用的函数 (没有函数名)。函数是对象在 JavaScript 中使用 typeof 操作符判断函数类型将返回 &quot;function&quot; 。但是JavaScript 函数描述为一个对象更加准确。JavaScript 函数有 属性 和 方法。arguments.length 属性返回函数调用过程接收到的参数个数：function myFunction(a, b) {    return arguments.length;}var a = myFunction(3, 4) //a=2toString() 方法将函数作为一个字符串返回:实例function myFunction(a, b) {    return a * b;}var txt = myFunction.toString(); // 输出结果: function myFunction(a, b) { return a * b; }</code></pre><h5 id="JavaScript-函数参数"><a href="#JavaScript-函数参数" class="headerlink" title="JavaScript 函数参数"></a>JavaScript 函数参数</h5><pre><code>Arguments 对象JavaScript 函数有个内置的对象 arguments 对象。argument 对象包含了函数调用的参数数组。通过这种方式你可以很方便的找到最大的一个参数的值：实例x = findMax(1, 123, 500, 115, 44, 88);function findMax() {    var i, max = arguments[0];    if(arguments.length &lt; 2) return max;    for (i = 0; i &lt; arguments.length; i++) {        if (arguments[i] &gt; max) {            max = arguments[i];        }    }    return max;}创建一个函数用来统计所有数值的和：实例x = sumAll(1, 123, 500, 115, 44, 88);function sumAll() {    var i, sum = 0;    for (i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}</code></pre><h4 id="JavaScript-函数调用"><a href="#JavaScript-函数调用" class="headerlink" title="JavaScript 函数调用"></a>JavaScript 函数调用</h4><pre><code>JavaScript 函数有 4 种调用方式。每种方式的不同方式在于 this 的初始化。</code></pre><h5 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h5><pre><code>一般而言，在Javascript中，this指向函数执行时的当前对象。注意 this 是保留关键字，你不能修改 this 的值。调用 JavaScript 函数</code></pre><h5 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h5><pre><code>实例function myFunction(a, b) {    return a * b;}myFunction(10, 2);           // myFunction(10, 2) 返回 20以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。myFunction() 和 window.myFunction() 是一样的：实例function myFunction(a, b) {    return a * b;}window.myFunction(10, 2);    // window.myFunction(10, 2) 返回 20这是调用 JavaScript 函数常用的方法， 但不是良好的编程习惯 全局变量，方法或函数容易造成命名冲突的bug。</code></pre><h5 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h5><pre><code>当函数没有被自身的对象调用时， this 的值就会变成全局对象。在 web 浏览器中全局对象是浏览器窗口（window 对象）。该实例返回 this 的值是 window 对象:实例function myFunction() {    return this;}myFunction();                // 返回 window 对象函数作为全局对象调用，会使 this 的值成为全局对象。使用 window 对象作为一个变量容易造成程序崩溃。</code></pre><h5 id="函数作为方法调用"><a href="#函数作为方法调用" class="headerlink" title="函数作为方法调用"></a>函数作为方法调用</h5><pre><code>在 JavaScript 中你可以将函数定义为对象的方法。以下实例创建了一个对象 (myObject), 对象有两个属性 (firstName 和 lastName), 及一个方法 (fullName):实例var myObject = {    firstName:&quot;John&quot;,    lastName: &quot;Doe&quot;,    fullName: function () {        return this.firstName + &quot; &quot; + this.lastName;    }}myObject.fullName();         // 返回 &quot;John Doe&quot;fullName 方法是一个函数。函数属于对象。 myObject 是函数的所有者。this对象，拥有 JavaScript 代码。实例中 this 的值为 myObject 对象。测试以下！修改 fullName 方法并返回 this 值:实例var myObject = {    firstName:&quot;John&quot;,    lastName: &quot;Doe&quot;,    fullName: function () {        return this;    }}myObject.fullName();          // 返回 [object Object] (所有者对象)函数作为对象方法调用，会使得 this 的值成为对象本身。</code></pre><h5 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h5><pre><code>如果函数调用前使用了 new 关键字, 则是调用了构造函数。这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：实例// 构造函数:function myFunction(arg1, arg2) {    this.firstName = arg1;    this.lastName  = arg2;}// This    creates a new objectvar x = new myFunction(&quot;John&quot;,&quot;Doe&quot;);x.firstName;                             // 返回 &quot;John&quot;构造函数的调用会创建一个新的对象。新对象会继承构造函数的属性和方法。构造函数中 this 关键字没有任何的值。this 的值在函数调用时实例化对象(new object)时创建。</code></pre><h5 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h5><pre><code>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。实例function myFunction(a, b) {    return a * b;}myObject = myFunction.call(myObject, 10, 2);     // 返回 20实例function myFunction(a, b) {    return a * b;}myArray = [10, 2];myObject = myFunction.apply(myObject, myArray);  // 返回 20两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</code></pre><h4 id="JavaScript-冒泡"><a href="#JavaScript-冒泡" class="headerlink" title="JavaScript 冒泡"></a>JavaScript 冒泡</h4><pre><code>事件传递有两种方式：冒泡与捕获。事件传递定义了元素事件触发的顺序。 如果你将 &lt;p&gt; 元素插入到 &lt;div&gt; 元素中，用户点击 &lt;p&gt; 元素, 哪个元素的 &quot;click&quot; 事件先被触发呢？在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： &lt;p&gt; 元素的点击事件先触发，然后会触发 &lt;div&gt; 元素的点击事件。在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： &lt;div&gt; 元素的点击事件先触发 ，然后再触发 &lt;p&gt; 元素的点击事件。addEventListener(event, function, useCapture);element.addEventListener(&quot;click&quot;, myFunction);默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:element.removeEventListener(&quot;click&quot;, myFunction);IE8：    elem.attachEvent(&quot;on事件名&quot;,function)        //监听绑定事件        element.detachEvent(event, function);    //移除监听事件跨浏览器解决方法:var x = document.getElementById(&quot;myBtn&quot;);if (x.addEventListener) {                    // 所有主流浏览器，除了 IE 8 及更早版本    x.addEventListener(&quot;click&quot;, myFunction);} else if (x.attachEvent) {                  // IE 8 及更早版本    x.attachEvent(&quot;onclick&quot;, myFunction);}</code></pre><h4 id="JavaScript-for…in-循环"><a href="#JavaScript-for…in-循环" class="headerlink" title="JavaScript for…in 循环"></a>JavaScript for…in 循环</h4><pre><code>JavaScript for...in 语句循环遍历对象的属性。语法for (variable in object){    执行的代码……}for...in 循环中的代码块将针对每个属性执行一次。实例循环遍历对象的属性：实例var person={fname:&quot;John&quot;,lname:&quot;Doe&quot;,age:25}; for (x in person){    txt=txt + person[x];}//输出结果:Johnlname25所有 JavaScript 数字均为 64 位精度整数（不使用小数点或指数计数法）最多为 15 位。实例var x = 999999999999999;   // x 为 999999999999999var y = 9999999999999999;  // y 为 10000000000000000小数的最大位数是 17，但是浮点运算并不总是 100% 准确：实例var x = 0.2+0.1; // 输出结果为 0.30000000000000004如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 &quot;x&quot;，则解释为十六进制数。实例var y = 0377; //255var z = 0xFF; //255绝不要在数字前面写零，除非您需要进行八进制转换。 默认情况下，JavaScript 数字为十进制显示。可以使用 toString() 方法 输出16进制、8进制、2进制。实例var myNumber=128;myNumber.toString(16);   // 返回 80myNumber.toString(8);    // 返回 200myNumber.toString(2);    // 返回 10000000var x = 2/0;    Infinityvar y = -2/0;    -Infinityvar x = 1000 / &quot;Apple&quot;;isNaN(x); // 返回 true   不是数字var y = 100 / &quot;1000&quot;;isNaN(y); // 返回 false  是数字字符串使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置：如果没找到对应的字符函数返回-1lastIndexOf() 方法在字符串末尾开始查找字符串出现的位置。match()函数用来查找字符串中特定的字符，并且如果找到的话，则返回这个字符。replace() 方法在字符串中用某些字符替换另一些字符。str=&quot;Please visit Microsoft!&quot;var n=str.replace(&quot;Microsoft&quot;,&quot;w3cschool&quot;);字符串大小写转换使用函数 toUpperCase() / toLowerCase()字符串使用split()函数转为数组字符串属性和方法属性:    length    prototype    constructor方法:    charAt()    charCodeAt()    concat()    fromCharCode()    indexOf()    lastIndexOf()    match()    replace()    search()    slice()    split()    substr()    substring()    toLowerCase()    toUpperCase()    valueOf()如果布尔对象无初始值或者其值为:0-0null&quot;&quot;falseundefinedNaN那么对象的值为 false。否则，其值为 true（即使当变量值为字符串 &quot;false&quot; 时）！正则test()方法搜索字符串指定的值，根据结果并返回真或假。exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</code></pre><h4 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h4><pre><code>所有浏览器都支持 window 对象。它表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法。甚至 HTML DOM 的 document 也是 window 对象的属性之一Window 尺寸有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：window.innerHeight - 浏览器窗口的内部高度window.innerWidth - 浏览器窗口的内部宽度对于 Internet Explorer 8、7、6、5：document.documentElement.clientHeightdocument.documentElement.clientWidth或者document.body.clientHeightdocument.body.clientWidth实用的 JavaScript 方案（涵盖所有浏览器）：实例var w=window.innerWidth|| document.documentElement.clientWidth|| document.body.clientWidth;var h=window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight;该例显示浏览器窗口的高度和宽度：（不包括工具栏/滚动条）其他 Window 方法一些其他方法：window.open() - 打开新窗口window.close() - 关闭当前窗口window.moveTo() - 移动当前窗口window.resizeTo() - 调整当前窗口的尺寸JavaScript Window Screenwindow.screen对象在编写时可以不使用 window 这个前缀。一些属性：screen.availWidth - 可用的屏幕宽度screen.availHeight - 可用的屏幕高度screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。Window Locationwindow.location 对象在编写时可不使用 window 这个前缀。 一些例子：一些实例:location.hostname 返回 web 主机的域名location.pathname 返回当前页面的路径和文件名location.port 返回 web 主机的端口 （80 或 443）location.protocol 返回所使用的 web 协议（http:// 或 https://）location.href 属性返回当前页面的 URL。&lt;script&gt;    document.write(location.href);&lt;/script&gt;以上代码输出为：http://www.runoob.com/js/js-window-location.html&lt;script&gt;    document.write(location.pathname);&lt;/script&gt;以上代码输出为：/js/js-window-location.html&lt;script&gt;    document.write(location.hostname);&lt;/script&gt;以上代码输出为：www.runoob.comlocation.assign() 方法加载新的文档。加载一个新的文档：&lt;html&gt;    &lt;head&gt;        &lt;script&gt;            function newDoc()              {              window.location.assign(&quot;http://www.w3cschool.cc&quot;)              }        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;input type=&quot;button&quot; value=&quot;Load new document&quot; onclick=&quot;newDoc()&quot;&gt;//点击以后会跳转到http://www.w3cschool.cc    &lt;/body&gt;&lt;/html&gt;Window Historywindow.history对象在编写时可不使用 window 这个前缀。为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。一些方法：history.back() - 与在浏览器点击后退按钮相同history.forward() - 与在浏览器中点击按钮向前相同window.navigator 对象包含有关访问者浏览器的信息。&lt;div id=&quot;example&quot;&gt;&lt;/div&gt;&lt;script&gt;    txt = &quot;&lt;p&gt;浏览器代号: &quot; + navigator.appCodeName + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;浏览器名称: &quot; + navigator.appName + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;浏览器版本: &quot; + navigator.appVersion + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;启用Cookies: &quot; + navigator.cookieEnabled + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;硬件平台: &quot; + navigator.platform + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;用户代理: &quot; + navigator.userAgent + &quot;&lt;/p&gt;&quot;;    txt+= &quot;&lt;p&gt;用户代理语言: &quot; + navigator.systemLanguage + &quot;&lt;/p&gt;&quot;;    document.getElementById(&quot;example&quot;).innerHTML=txt;&lt;/script&gt; </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS知识随记&quot;&gt;&lt;a href=&quot;#JS知识随记&quot; class=&quot;headerlink&quot; title=&quot;JS知识随记&quot;&gt;&lt;/a&gt;JS知识随记&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;使用 window.alert() 弹出警告框。
使用 document.write() 方
      
    
    </summary>
    
      <category term="JS" scheme="https://www.yyandxx.win/categories/JS/"/>
    
    
      <category term="JS" scheme="https://www.yyandxx.win/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub Page让小白也能拥有自己的个人博客</title>
    <link href="https://www.yyandxx.win/2018/05/29/Hexo-GitHub-Page%E8%AE%A9%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E6%8B%A5%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.yyandxx.win/2018/05/29/Hexo-GitHub-Page让小白也能拥有自己的个人博客/</id>
    <published>2018-05-29T09:58:01.000Z</published>
    <updated>2018-05-30T06:04:05.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一年前就准备了个域名想搭建个个人博客，但是由于工作比较忙，最后也没时间来做这个东西，最近项目都差不多结束了，这一闲下来就容易瞎想，突然想到作为一名程序猿竟然没有自己的博客是不是有点栽面，然后就开始动手搭建了自己的博客。</p><p>刚刚搭好博客还不知道写点啥，干脆趁热打铁将搭建的过程拿出来跟大家分享一下，供大家参考，同时纪念一下我的第一篇文章。</p><p>兄dei，来想一想等搭建完了给那些不太了解这方面的朋友看一下，是不是瞬间感觉这一块那一块方方面面的牌面就上来了。如果你也想这么有牌面儿的话，那么就跟着下面的步骤一步一步来，看完以后你也可以轻易的做到。</p><p>由于博主用的是mac，所以具体步骤中都以mac为基础进行说明。如果在操作过程中各位小伙伴有什么问题的话可以加我QQ，我可以协助你，QQ：1129306017。</p><p>好了话不多说，咱们直接步入正题。</p><h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a><strong>1.准备环境</strong></h3><ul><li><p>1.安装node</p></li><li><p>2.注册github账户，配置仓库</p></li><li><p>3.安装和配置Git</p></li><li><p>4.购买域名(可买可不买)</p></li></ul><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a><strong>2.安装Hexo</strong></h3><h3 id="3-Hexo初体验"><a href="#3-Hexo初体验" class="headerlink" title="3.Hexo初体验"></a><strong>3.Hexo初体验</strong></h3><h3 id="4-部署到github"><a href="#4-部署到github" class="headerlink" title="4.部署到github"></a><strong>4.部署到github</strong></h3><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><ol><li><strong>安装node</strong></li></ol><p>大家根据自己的操作系统去下载对应版本的node</p><p>下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>下载好以后双击.pkg文件按照提示安装即可，安装完毕以后可以用以下命令进行验证是否安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. node -v</span><br><span class="line">2. npm -v</span><br></pre></td></tr></table></figure><p>首先打开终端，mac用户可以按住command+空格，输入Terminal.app；window用户按住win+r    ，输入cmd。</p><p><img src="images/hexojiaocheng/nodetest.jpeg" alt=""></p><p>如果你输入完命令也会出现版本信息，那么恭喜你，node安装成功了。</p><ol start="2"><li><strong>注册github账户，配置仓库</strong></li></ol><p>注册直通车：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>兄dei，很简单，不用担心！</p><p>ok！注册完了我们就要进行下一步操作了，配置仓库。</p><p><img src="images/hexojiaocheng/repository.jpeg" alt=""></p><p><strong>注意：下图中绿色框中和红色框保持一致，都填完以后点击Create repository即可</strong></p><p><img src="images/hexojiaocheng/creat.jpeg" alt=""></p><p>如果你也出现了下图，那么恭喜你，离成功又进了一步。</p><p><a href="images/hexojiaocheng/finish.jpeg"></a></p><ol start="3"><li><strong>安装和配置Git</strong></li></ol><p>下载自己系统对应的版本即可：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>同样按照提示一步一步的安装，然后运行下面的命令，如果出现版本信息，那么就代表安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>接下来我们主要说一下生成和添加ssh key</p><p>设置Git的username和email(不要直接复制粘贴代码，记得改一下email和name)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. git config --global user.name &quot;your_name&quot;  </span><br><span class="line">2. git config --global user.email &quot;your_email@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>生成秘钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>远端仓库添加密钥</p><p>首先针对mac的兄dei，打开终端运行下面的代码就复制成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id-rsa.pub</span><br></pre></td></tr></table></figure><p>window的兄dei可以打开我的电脑-&gt;C盘-&gt;用户-&gt;Administrator-&gt;.ssh-&gt;id-rsa.pub，用记事本打开复制里面的内容即可。</p><p>接下来是去远端仓库添加秘钥</p><p>打开github，点击自己的头像位置，会弹出下拉菜单，点击Settings，如下图：</p><p><img src="images/hexojiaocheng/setting1.jpeg" alt=""></p><p>然后点击SSH and GPG keys ，SSH and GPG keys</p><p><img src="images/hexojiaocheng/setting2.jpeg" alt=""></p><p>将刚才复制的内容粘贴到红框中，title自己随便写一个就行，然后点击Add SSH key，这样就添加完成了</p><p><img src="images/hexojiaocheng/setting3.jpeg" alt=""></p><ol start="4"><li><strong>购买域名(可买可不买)</strong></li></ol><p>我是在百度云买的，在哪里买都可以，买域名很简单，选好自己想要的，下单就ok，这里就不赘述了。</p><h2 id="2-安装Hexo-1"><a href="#2-安装Hexo-1" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><ol><li>首先找一个你觉得合适的地方建一个文件夹，我们可以称之为Hexo</li></ol><p>windows的用户点击进入文件夹然后在空白位置右击，选择Git Bash</p><p>mac用户如果你不是程序员的话，我建议你直接在桌面建一个文件夹就好了，然后打开Terminal.app，输入cd Desktop/Hexo/</p><p>接下来在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo -g</span><br></pre></td></tr></table></figure><p>这样就会自动去安装hexo了，等安装完毕后输入hexo -v，看是否能出现版本号等信息</p><p><img src="images/hexojiaocheng/install.jpeg" alt=""></p><h2 id="3-Hexo初体验-1"><a href="#3-Hexo初体验-1" class="headerlink" title="3.Hexo初体验"></a>3.Hexo初体验</h2><ol><li>好了，接下来我们体验下Hexo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>如果你和下图一样，那么恭喜你init成功</p><p><img src="images/hexojiaocheng/init.jpeg" alt=""></p><p>接下来按照顺序输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="images/hexojiaocheng/startserver.jpeg" alt=""></p><p>输入完毕后如下图，去打开浏览器，在地址栏，输入localhost:4000，意想不到的事情就发生了，快看看你的是不是也跟我这个一样呢。</p><p><img src="images/hexojiaocheng/server.jpeg" alt=""></p><h2 id="4-部署到github-1"><a href="#4-部署到github-1" class="headerlink" title="4.部署到github"></a>4.部署到github</h2><ol><li>首先我们需要配置一下项目链接，打开项目所在目录，目录下有个名为_config.yml的文件，用编辑器打开即可，没有编辑器的用记事本打开也行。</li></ol><p>拖到文件末尾配置一下deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git </span><br><span class="line"> repository: https://github.com/BlueEyes-biao/BlueEyesbiao.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p>repository字段需要填写自己的项目地址，项目地址可以根据下图提示，进行查找，首先打开github。</p><p><img src="images/hexojiaocheng/step1.jpeg" alt=""></p><p><img src="images/hexojiaocheng/step2.jpeg" alt=""></p><p><img src="images/hexojiaocheng/step3.jpeg" alt=""></p><p>将复制的项目仓库地址，替换repository即可</p><p>接下来只需要在命令行中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就部署到了github上面，你可以在浏览器中输入<a href="https://yourName.github.io" target="_blank" rel="noopener">https://yourName.github.io</a>(我的是<a href="https://BlueEyesbiao.github.io" target="_blank" rel="noopener">https://BlueEyesbiao.github.io</a>)</p><ol start="2"><li>下面这部分是针对已经购买域名的兄dei，怎么讲域名和github绑定，从而可以通过访问你的域名来查看你的博客。</li></ol><p>在项目source目录下新建一个文件，起名为CNAME，注意这里不可以有后缀，用记事本打开这个文件，将你购买的域名写入保存。</p><p>接下来是解析你的域名：</p><p><img src="images/hexojiaocheng/jiexi.jpeg" alt=""></p><p>按照博主这样添加解析就可以了</p><p><img src="images/hexojiaocheng/jiexi2.jpeg" alt=""></p><p>可能你不知道ip是多少，你可以在终端中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure><p><img src="images/hexojiaocheng/ip.jpeg" alt=""></p><p>红框内即为你项目的服务器ip</p><p>然后打开github 找到你的项目点击setting</p><p><img src="images/hexojiaocheng/settingurl.jpeg" alt=""></p><p>找到github page，讲你的域名写入，然后save就ok了</p><p><img src="images/hexojiaocheng/site.jpeg" alt=""></p><p>接下来你就可以直接打开你的域名，你的私人博客也就搭建完毕了，可以拿去装13了。</p><h3 id="怎么样兄dei，是不是很简单，搭建私人博客就是这么简单。本文只是一个入门学习文章，如果你想了解更多的话，可以收藏本网站。"><a href="#怎么样兄dei，是不是很简单，搭建私人博客就是这么简单。本文只是一个入门学习文章，如果你想了解更多的话，可以收藏本网站。" class="headerlink" title="怎么样兄dei，是不是很简单，搭建私人博客就是这么简单。本文只是一个入门学习文章，如果你想了解更多的话，可以收藏本网站。"></a>怎么样兄dei，是不是很简单，搭建私人博客就是这么简单。本文只是一个入门学习文章，如果你想了解更多的话，可以收藏本网站。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一年前就准备了个域名想搭建个个人博客，但是由于工作比较忙，最后也没时间来做这个东西，最近项目都差不多结束了，这一闲下来就容易瞎想，突然想到作
      
    
    </summary>
    
      <category term="Hexo" scheme="https://www.yyandxx.win/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.yyandxx.win/tags/Hexo/"/>
    
  </entry>
  
</feed>
